Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
//program
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result=new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(candidates,target,0,new ArrayList<>(),result);
        return result;
    }
    private static void backtrack(int candidates[],int target,int start,List<Integer>current, List<List<Integer>> result)
    {
        if(target==0)
        {
            result.add(new ArrayList<>(current));
            return;
        }
        if(target<0)
        {
            return;
        }
        for(int i=start;i<candidates.length;i++)
        {
            current.add(candidates[i]);
            backtrack(candidates,target-candidates[i],i,current,result);
            current.remove(current.size()-1);
        }
    }
}
