//Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
//

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result=new int[2];
        result[0]=findfirst(nums,target);
        result[1]=findlast(nums,target);
        return result;
    }
    private int findfirst(int[] nums,int target)
    {
        int left=0,right=nums.length-1;
        int firstpos=-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid]==target)
            {
                firstpos=mid;
                right=mid-1;
            }
            else if(nums[mid]<target)
            {
                left=mid+1;
            }
            else{
                right=mid-1;
            }
        }
        return firstpos;
    }
    private int findlast(int[] nums,int target)
    {
        int left=0,right=nums.length-1;
        int lastpos=-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid]==target)
            {
                lastpos=mid;
                left=mid+1;
            }
            else if(nums[mid]>target)
            {
                right=mid-1;
            }
            else
            {
                left=mid+1;
            }
        }  
        return lastpos; 

    }
}
